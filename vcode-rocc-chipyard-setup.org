#+VCODE RoCC Accelerator & Chipyard Setup
#+AUTHOR: Karl Hallsby

* Dependencies
** Verilator
Verilator is needed by Chipyard to compile software simulations.

Verilator must end up in ~$PATH~ for Chipyard to use it.
So, if you do not have superuser permissions, or only want a user-local install, use the ~--prefix~ flag in the [[*Configure][Configure]] step.

*** Dependencies
   1. GCC
   2. flex
   3. bison
   4. Make
   5. autoconf

On Ubuntu:
#+begin_src sh
$ sudo apt-get install -y build-essential autoconf
#+end_src

*** Verilator Repository
#+begin_src sh
$ git clone http://git.veripool.org/git/verilator
$ cd verilator
#+end_src

*** Configure
The Chipyard documentation says you should use ~v4.034~ of Verilator.
However, I have encountered issues with it, like a missing ~verilator.h~ header.
This newer version appears to be compatible, but it does throw extra warnings about the inference of certain edge-triggered flip-flops.
#+begin_src sh
$ git checkout v4.224
$ autoconf
$ ./configure --prefix=<binary-install-directory>
# My preference is --prefix="$HOME/verilator-v4.224-install"
#+end_src

*** Build
Building verilator is fairly fast.
You can parallelize the compilation by using ~-j$(nproc)~.
However, I have encountered strange compilation issues on *very* parallel compilations.
#+begin_src sh
$ make -j$(nproc)

# You can skip testing the binaries if you want.
$ make test # You can parallelize this with -j as well
#+end_src

*** Install
If you used the ~--prefix~ flag in the [[*Configure][Configure]] step, then you probably will not need ~sudo~ permissions.
#+begin_src sh
$ make install # If you install to a root-owned directory, you will need sudo
#+end_src

*** Make Available
Chipyard requires that the binaries created by verilator be in ~$PATH~.
I prefer to just export the directory in my ~.bashrc~.
I usually prepend my verilator install to the front of ~$PATH~ to ensure I use my install first.
#+begin_src sh
export PATH="$HOME/verilator-v4.224-install/bin":"$PATH"
#+end_src

You can check that you are using the right Verilator with the commands below:
#+begin_src sh
$ which verilator # Should return the path to your install of verilator
$ verilator --version # Should return the version & build date
#+end_src

** Chipyard
Chipyard is a very large install, approaching 30+ GB.
Make sure you have enough space.
All of the instructions below can also be found on [[https://chipyard.readthedocs.io/en/stable/Chipyard-Basics/Initial-Repo-Setup.html][Chipyard's Setup Documentation]].

*** Dependencies
There are lots of dependencies.
Look at the [[*Quick Setup][Quick Setup]] scripts for what you will need.

*** Repository
#+begin_src sh
$ git clone https://github.com/Constellation-FPGA/chipyard.git
$ cd chipyard
$ git checkout vcode-rocc
#+end_src

*** Initialize Submodules
#+begin_src sh
$ ./scripts/init-submodules-no-riscv-tools.sh
#+end_src
If you checked out the ~vcode-rocc~ branch, the script will warn you that this is not an official release of Chipyard, which is expected.
Enter ~y~ to continue with fetching all the submodules needed.

Once the submodules are built, an ~env.sh~ file is generated, which creates some environment variables.

*** Build RISC-V Toolchain
I recommend you parallelize this build by exporting the ~MAKEFLAGS~ environment variable.
#+begin_src sh
$ export MAKEFLAGS=-jN # N is number of jobs to run in parallel
#+end_src

Because we intend to build a RoCC-based accelerator, we use the ~esp-tools~ toolchain.
However, cursory testing shows that ~riscv-tools~ will also work.
#+begin_src sh
$ ./scripts/build-toolchains.sh esp-tools # for a RoCC RISC-V toolchain
# $ ./scripts/build-toolchains.sh riscv-tools # for a normal risc-v toolchain
#+end_src

Once the toolchain is built, an ~env-<toolchain-name>.sh~ file is generated, which will then be sourced by the ~env.sh~ script.

*** Source the Toolchain
#+begin_src sh
$ source env.sh
#+end_src

** vcode-rocc
You only need to clone this repository if you are doing active development on the accelerator.
If you just want to use the accelerator in a design, without developing it, then you just need to clone [[*Repository][Chipyard]] and run its [[*Initialize Submodules][submodule-initialization]] step.

*** Repository
#+begin_src sh
$ git clone https://github.com/Constellation-FPGA/vcode-rocc.git
$ cd vcode-rocc
#+end_src

* Quick Setup
** Ubuntu Script
This is taken directly from [[https://chipyard.readthedocs.io/en/stable/Chipyard-Basics/Initial-Repo-Setup.html][Chipyard's Documentation]].
The script should work on any Ubuntu newer than 16.04 LTS.
#+begin_src sh
#!/usr/bin/env bash

set -ex

sudo apt-get install -y build-essential bison flex software-properties-common curl
sudo apt-get install -y libgmp-dev libmpfr-dev libmpc-dev zlib1g-dev vim default-jdk default-jre
# install sbt: https://www.scala-sbt.org/release/docs/Installing-sbt-on-Linux.html#Ubuntu+and+other+Debian-based+distributions
echo "deb https://repo.scala-sbt.org/scalasbt/debian /" | sudo tee -a /etc/apt/sources.list.d/sbt.list
curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | sudo apt-key add
sudo apt-get update
sudo apt-get install -y sbt
sudo apt-get install -y texinfo gengetopt
sudo apt-get install -y libexpat1-dev libusb-dev libncurses5-dev cmake
# deps for poky
sudo apt-get install -y python3.8 patch diffstat texi2html texinfo subversion chrpath wget
# deps for qemu
sudo apt-get install -y libgtk-3-dev gettext
# deps for firemarshal
sudo apt-get install -y python3-pip python3.8-dev rsync libguestfs-tools expat ctags
# install DTC
sudo apt-get install -y device-tree-compiler
sudo apt-get install -y python
# install git >= 2.17. Can skip if git already >= 2.17.
sudo add-apt-repository ppa:git-core/ppa -y
sudo apt-get update
sudo apt-get install git -y

# install verilator
git clone http://git.veripool.org/git/verilator
cd verilator
git checkout v4.224
autoconf && ./configure --prefix="$HOME/verilator-v4.224-install" && make -j$(nproc) && make install
echo "export PATH=$HOME/verilator-v4.224-install/bin:$PATH" >> "$HOME/.bashrc"
#+end_src

** CentOS Script
This is taken directly from [[https://chipyard.readthedocs.io/en/stable/Chipyard-Basics/Initial-Repo-Setup.html][Chipyard's Documentation]].
#+begin_src sh
#!/usr/bin/env bash

set -ex

sudo yum groupinstall -y "Development tools"
sudo yum install -y gmp-devel mpfr-devel libmpc-devel zlib-devel vim git java java-devel

# Install SBT https://www.scala-sbt.org/release/docs/Installing-sbt-on-Linux.html#Red+Hat+Enterprise+Linux+and+other+RPM-based+distributions
# sudo rm -f /etc/yum.repos.d/bintray-rpm.repo
# Use rm above if sbt installed from bintray before.
curl -L https://www.scala-sbt.org/sbt-rpm.repo > sbt-rpm.repo
sudo mv sbt-rpm.repo /etc/yum.repos.d/

sudo yum install -y sbt texinfo gengetopt
sudo yum install -y expat-devel libusb1-devel ncurses-devel cmake "perl(ExtUtils::MakeMaker)"
# deps for poky
sudo yum install -y python38 patch diffstat texi2html texinfo subversion chrpath git wget
# deps for qemu
sudo yum install -y gtk3-devel
# deps for firemarshal
sudo yum install -y python38-pip python38-devel rsync libguestfs-tools makeinfo expat ctags
# Install GNU make 4.x (needed to cross-compile glibc 2.28+)
sudo yum install -y centos-release-scl
sudo yum install -y devtoolset-8-make
# install DTC
sudo yum install -y dtc
sudo yum install -y python

# install verilator
git clone http://git.veripool.org/git/verilator
cd verilator
git checkout v4.224
autoconf && ./configure --prefix="$HOME/verilator-v4.224-install" && make -j$(nproc) && make install
echo "export PATH=$HOME/verilator-v4.224-install/bin:$PATH" >> "$HOME/.bashrc"
#+end_src

* Usage
** Building an SoC Design
Normally, I start by running software simulations using verilator, before moving on.
#+begin_src sh
$ cd sims/verilator
# To build the vcode-rocc design, you must pass a CONFIG option
$ make CONFIG=VCodeRocketPrintfConfig # PrintfConfig will add printfs to synthesized design.
#+end_src

** Active development of vcode-rocc Accelerator
For active development, it is a hassle to use git submodules like Chipyard does.
What I prefer to do instead is to replace the submodule with a symlink to a separate clone of vcode-rocc.
#+begin_src sh
$ cd generators
$ rm -rf vcode-rocc
$ ln -s <path-to-separate-vcode-rocc-clone>
#+end_src

The build system will not know the difference, and everything should work just as normal.

*** Building the Testing Binaries
Building the binaries requires a full RISC-V toolchain.
The Chipyard one works perfectly fine ([[*Build RISC-V Toolchain][Build RISC-V Toolchain]]).
Once the toolchain is built, source the ~env.sh~ file to set the ~$RISCV~ environment variable.
#+begin_src sh
$ source chipyard/env.sh
$ cd vcode-rocc/test
$ make
#+end_src

*** Adding additional Program Tests
To add another program to test on the vcode-rocc Rocket design, you write a new C source file, add the new file to ~modules.mk~, then build them.
There are several examples of how to write a test in the ~test/src~ directory.
#+begin_src sh
$ source chipyard/env.sh
$ cd vcode-rocc/test
$ pushd src
$ vim <test-name>.c # Write your test here.
# You could also copy an already-written test and replace what you need there.
$ vim modules.mk # Add the file name of your test to the list
$ popd
$ make
#+end_src

The build system should generate both a raw binary, ~test.riscv~, and an ELF file, ~test~, that could be run in an emulator like QEMU.

** Running Binaries on the Simulated vcode-rocc Design
To run the binaries, you need to provide the path to the binary as the ~BINARY~ flag to ~make~ and then run the ~run-binary~ target.
#+begin_src
$ cd chipyard/sims/verilator
$ make CONFIG=VCodeRocketPrintfConfig BINARY=vcode-rocc/tests/bin/<test>.riscv run-binary
#+end_src
